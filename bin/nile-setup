#!/usr/bin/env node
var pjson = require('../package.json'),
  main = require('../lib/main'),
  Geocoder = require('../classes/Geocoder').Geocoder,
  Router = require('../classes/Router').Router,
  InitialChecks = require('../classes/InitialChecks').InitialChecks,
  Chained = require('../classes/Chained').Chained,
  program = require('commander'),
  fs = require('fs'),
  path = require('path'),
  showhelp = true;

var help = function(){
    var examples = [];
    console.log(examples.join("\n"));
}
var installTable = function(client,key,callback){
  client.query( fs.readFileSync(path.join(__dirname,'..','setup',key+'.sql')).toString() , function(err, results){
      if (err){
        //this.logger.log('error',err);
        callback(err);
      }else{
        //this.logger.log('info',key+' installed');
        callback(null,'installed');
      }
  });
}
program
    .version(pjson.version)
    .description('nile-setup')
    .usage('[options]')
    .option('-c, --create', 'create the missing functions, extensions or tables if needed')
    .on('--help', help)
    .parse(process.argv);

main.init(function(system){
  system.connect(function(err){
    if (err){
      system.logger.log('error',err);
    }else{

      var initalChecks = new InitialChecks(system,false);
      var chain = new Chained();
      var installChain = new Chained();


      chain.add('version',initalChecks.checkFunction,['version'],initalChecks);
      chain.add('postgis',initalChecks.checkExtension,['postgis'],initalChecks);
      chain.add('plpgsql',initalChecks.checkExtension,['plpgsql'],initalChecks);
      chain.add('pgrouting',initalChecks.checkExtension,['pgrouting'],initalChecks);
      chain.add('pgr_fromatob',initalChecks.checkFunction,['pgr_fromatob'],initalChecks);
      chain.add('hstore2json',initalChecks.checkFunction,['hstore2json'],initalChecks);

      chain.add('car_ways',initalChecks.checkTable,['car_ways'],initalChecks);
      chain.add('cycle_ways',initalChecks.checkTable,['cycle_ways'],initalChecks);
      chain.add('feet_ways',initalChecks.checkTable,['feet_ways'],initalChecks);

      chain.run(function(err,res){
        //console.log(err,res);
        if (err){
          system.logger.log('error',err);
        }else{
          for(var i in res){
            if (res[i]){
              system.logger.log('info',i+' OK');
            }else{
              if (program.create){
                if (i==='car_ways'){
                  installChain.add(i,installTable,[system.client,i],system);
                }
                if (i==='cycle_ways'){
                  installChain.add(i,installTable,[system.client,i],system);
                }
                if (i==='feet_ways'){
                  installChain.add(i,installTable,[system.client,i],system);
                }
              }else{
                system.logger.log('error',i+' FAILED');
              }

            }
          }
        }

        installChain.run(function(err,res){
          for(var i in res){
            if (res[i]){
              system.logger.log('info',i+' '+res[i]);
            }
          }
          system.disconnect();
        })

      });

    }
  })
})
