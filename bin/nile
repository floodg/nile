#!/usr/bin/env node
var pjson = require('../package.json'),
  main = require('../lib/main'),
  Geocoder = require('../classes/Geocoder').Geocoder,
  Router = require('../classes/Router').Router,
  program = require('commander'),
  showhelp = true;


var help = function(){
    var examples = [];
    console.log(examples.join("\n"));
}

program
    .version(pjson.version)
    .description('nile n(ode) tileserver')
    .usage('[options]')
    .option('-s, --service', 'run the service')
    .option('-g, --geocode <city,street>', 'geocode a given adress')
    .option('--feet', 'route by feet')
    .option('--cycle', 'route by cycle')
    .option('--car', 'route by car, default')
    .option('-r, --route <city_from,street_from,city_to,street_to>', 'route from to')
    .option('-c, --routeclasses', 'get all available classes for routing')
    //.option('-c, --creategeocode', 'create or recreates the geocode index')
    .option('-d, --debug', 'enable debug mode')
    .on('--help', help)
    .parse(process.argv);

if (program.service){
  showhelp = false;
  main.startup();
}

if (program.geocode){
  showhelp = false;
  main.init(function(system){
    system.connect(function(err){
      if (err){
        system.logger.log('error',err);
      }else{
        var p = program.geocode.split(',');

        var geocoder = new Geocoder(system,program.debug);
        geocoder.geoCode(p[0],p[1],function(err,res){
          console.log(JSON.stringify(res,null,4));
          system.disconnect();
        });
      }
    });
  });
}

if (program.routeclasses){
  showhelp = false;
  main.init(function(system){
    system.connect(function(err){
      if (err){
        system.logger.log('error',err);
      }else{
        var router = new Router(system,program.debug);
        router.getClasses(function(err,res){
          console.log(JSON.stringify(res,null,4));
          system.disconnect();
        });
      }
    });
  });
}

if (program.route){
  showhelp = false;
  main.init(function(system){
    system.connect(function(err){
      if (err){
        system.logger.log('error',err);
      }else{
        var p = program.route.split(',');

        var router = new Router(system,program.debug);
        if (program.cycle) router.tbl = 'cycle_ways';
        if (program.car) router.tbl = 'car_ways';
        if (program.feet) router.tbl = 'feet_ways';
        router.routeAddress(p[0],p[1],p[2],p[3],function(err,res){
          console.log(JSON.stringify(res,null,4));
          system.disconnect();
        });
      }
    });
  });
}

if (showhelp){
  program.help();
}
